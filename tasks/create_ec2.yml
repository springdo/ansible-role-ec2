-   name: Create an EC2 key for Jenkins to use
    ec2_key:
      name: "{{ ec2_key_name }}"
      region: "{{ ec2_aws_region }}"
      state: present
    register: ec2_key

-   name: save private key
    copy: content="{{ ec2_key.key.private_key }}" dest="./{{ ec2_key_name }}-private.pem" mode=0600
    when: ec2_key.changed

-   name: add private key to ssh agent
    shell: "ssh-add ./{{ ec2_key_name }}-private.pem"

-   name: Create security group for instances
    ec2_group:
        name: "{{ app_environment }}-{{ item.key }}-{{ app_namespace }}"
        description: "security group for {{ item.key }}"
        region: "{{ ec2_aws_region }}"
        rules: "{{ item.value }}"
        rules_egress: "{{ ec2_egress_rules }}"
        vpc_id: "{{ ec2_vpc_id }}"
    register: ec2_security_groups
    with_dict: "{{ ec2_security_groups }}"

-   set_fact:
      _ec2_sg_ids: "{{ ec2_security_groups['results']|map(attribute='group_id')|list }}"

-   name: Delete an EC2 instance (if exists)
    ec2:
      state: 'absent'
      instance_ids: '{{ ec2_res.instance_ids }}'
      when: ec2_res

-   name: Create an EC2 instance
    ec2:
        key_name: "{{ ec2_key_name }}"
        region: "{{ ec2_aws_region }}"
        group_id: "{{ _ec2_sg_ids }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ec2_ami }}"
        wait: yes
        instance_tags:
            environment: "{{ app_environment }}"
            Name: "{{ ec2_name }}"
            type: "{{ app_type }}"
        count_tag:
            Name: "{{ ec2_name }}"
        exact_count: "{{ ec2_exact_count }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
        assign_public_ip: "{{ ec2_assign_public_ip }}"
    register: ec2_res

-   set_fact:
      ec2: "{{ec2_res}}" # allows the registered ec2_res above to be used outside this task file

-   name: Add IP to ec2_hosts group
    add_host: hostname={{ item.private_ip }} groups=ec2_hosts,{{ app_type }}
    with_items: '{{ (ec2|default({"tagged_instances": []}))["tagged_instances"] }}'
    changed_when: False

-   name: Wait for SSH to come up
    wait_for: host={{ item.private_ip }} port=22 delay=60 timeout=320 state=started
    with_items: '{{ (ec2|default({"instances": []}))["instances"] }}'